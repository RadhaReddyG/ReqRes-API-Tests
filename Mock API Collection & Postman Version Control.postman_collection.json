{
	"info": {
		"_postman_id": "8b1aab61-4167-4827-b3c6-73535e20fd77",
		"name": "Mock API Collection & Postman Version Control",
		"description": "1. **Use Postman’s mock server functionality to simulate API responses. Create a mock server and explain how it can be used for testing and development.**\n    \n\nAPI mocking is practice of simulating the behavior of an API endpoint during testing without actually invoking the real API. It is beneficial during the development stage.\n\n- **Request Headers:** Provide metadata about the request, such as authentication (Authorization), content type (Content-Type), and caching control.\n    \n- **Response Headers:** Contain metadata about the server response, including status info, content type, and security policies.\n    \n\n**Benefits:**\n\n- Mock APIs are useful when applications have dependencies with external APIs.\n    \n- Mock APIs are useful for testers to plan and validate test executions and for developers to do unit testing and identify the initial development stages.\n    \n- Mock APIs are useful in situations where the complete API needs to be made available for consumer testing before committing it to development stage\n    \n- Development Team can start the Front End Development without Backend being ready as the Mock Server simulates the required responses so no tight coupling with backend development\n    \n- Early Testing before even actual API exists which prevents defects flowing into next stages of development\n    \n\n**Integration and Collaboration:**\n\n**Share a Postman collection and set up version control using Postman’s collaboration features. Discuss how you manage changes and ensure consistency.**\n\n**Version Control through Forks & Merge Requests:** This is the **most Git-like** feature Postman offers.\n\n**Steps:**\n\n- A team member creates a **fork** of a collection.\n    \n- Makes changes in the fork.\n    \n- Creates a **Pull request** to the original collection.\n    \n- Reviewers can compare changes (diff view) and approve/reject them.\n    \n- Merge changes option will be used to merge the changees directly to the original collection\n    \n- Pull Changes option will be used to sync other team member's updates to the forked collection\n    \n- Tracks changes, promotes collaboration, and enforces approvals.\n    \n\n<img src=\"https://content.pstmn.io/a1a984c9-67f7-4e23-a5d1-1d64fa41a207/aW1hZ2UucG5n\" width=\"940\" height=\"939\">\n\n<img src=\"https://content.pstmn.io/e75dbec3-92c1-4286-91a9-7ab0481d688f/aW1hZ2UucG5n\" width=\"940\" height=\"679\">\n\n<img src=\"https://content.pstmn.io/64fa2c66-5219-49de-b019-b459125d68d4/aW1hZ2UucG5n\" alt=\"\" height=\"1424\" width=\"1346\">",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36255263",
		"_collection_link": "https://www.postman.com/radhabontha/workspace/7153c75a-8ad5-4f1c-9260-59e486bc6bdd/collection/36255263-8b1aab61-4167-4827-b3c6-73535e20fd77?action=share&source=collection_link&creator=36255263"
	},
	"item": [
		{
			"name": "GET /users/1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{mock_base_url}}/users/1",
					"host": [
						"{{mock_base_url}}"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": [
				{
					"name": "200 OK",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mock_base_url}}/users/1",
							"host": [
								"{{mock_base_url}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "Text",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\"id\": 1, \"name\": \"Alice\", \"email\": \"alice@example.com\"}"
				}
			]
		},
		{
			"name": "POST /auth/login",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"user\", \"password\": \"pass\"}"
				},
				"url": {
					"raw": "{{mock_base_url}}/auth/login",
					"host": [
						"{{mock_base_url}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": [
				{
					"name": "200 OK",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{mock_base_url}}/auth/login",
							"host": [
								"{{mock_base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "Text",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\"token\": \"mocked-jwt-token\", \"expires_in\": 3600}"
				}
			]
		},
		{
			"name": "GET /users/404",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{mock_base_url}}/users/404",
					"host": [
						"{{mock_base_url}}"
					],
					"path": [
						"users",
						"404"
					]
				}
			},
			"response": [
				{
					"name": "404 Not Found",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mock_base_url}}/users/404",
							"host": [
								"{{mock_base_url}}"
							],
							"path": [
								"users",
								"404"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "Text",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\"error\": \"User not found\"}"
				}
			]
		},
		{
			"name": "GET /error/internal",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{mock_base_url}}/error/internal",
					"host": [
						"{{mock_base_url}}"
					],
					"path": [
						"error",
						"internal"
					]
				}
			},
			"response": [
				{
					"name": "500 Internal Server Error",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mock_base_url}}/error/internal",
							"host": [
								"{{mock_base_url}}"
							],
							"path": [
								"error",
								"internal"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "Text",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\"error\": \"Internal server error occurred\"}"
				}
			]
		}
	]
}